<?php

namespace DoctrineORMModule\Proxy\__CG__\Catalog\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Storage extends \Catalog\Entity\Storage implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'id', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'name', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'storageType', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'supplier', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'toolStock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'moneyStock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'parentStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'childStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'productStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stockTransactionFrom', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stockTransactionTo', 'sm'];
        }

        return ['__isInitialized__', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'id', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'name', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'storageType', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'supplier', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'toolStock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'moneyStock', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'parentStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'childStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'productStorage', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stockTransactionFrom', '' . "\0" . 'Catalog\\Entity\\Storage' . "\0" . 'stockTransactionTo', 'sm'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Storage $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getStockTransactionFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockTransactionFrom', []);

        return parent::getStockTransactionFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockTransactionFrom($stockTransactionFrom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockTransactionFrom', [$stockTransactionFrom]);

        return parent::setStockTransactionFrom($stockTransactionFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getStockTransactionTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockTransactionTo', []);

        return parent::getStockTransactionTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockTransactionTo($stockTransactionTo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockTransactionTo', [$stockTransactionTo]);

        return parent::setStockTransactionTo($stockTransactionTo);
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageType', []);

        return parent::getStorageType();
    }

    /**
     * {@inheritDoc}
     */
    public function setStorageType($storageType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStorageType', [$storageType]);

        return parent::setStorageType($storageType);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplier', []);

        return parent::getSupplier();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplier($supplier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplier', [$supplier]);

        return parent::setSupplier($supplier);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentStorage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentStorage', []);

        return parent::getParentStorage();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentStorage($parentStorage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentStorage', [$parentStorage]);

        return parent::setParentStorage($parentStorage);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildStorage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildStorage', []);

        return parent::getChildStorage();
    }

    /**
     * {@inheritDoc}
     */
    public function setChildStorage($childStorage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildStorage', [$childStorage]);

        return parent::setChildStorage($childStorage);
    }

    /**
     * {@inheritDoc}
     */
    public function getStock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStock', []);

        return parent::getStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setStock($stock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStock', [$stock]);

        return parent::setStock($stock);
    }

    /**
     * {@inheritDoc}
     */
    public function getToolStock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToolStock', []);

        return parent::getToolStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setToolStock($toolStock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToolStock', [$toolStock]);

        return parent::setToolStock($toolStock);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoneyStock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoneyStock', []);

        return parent::getMoneyStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoneyStock($moneyStock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoneyStock', [$moneyStock]);

        return parent::setMoneyStock($moneyStock);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductStorage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductStorage', []);

        return parent::getProductStorage();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductStorage($productStorage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductStorage', [$productStorage]);

        return parent::setProductStorage($productStorage);
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', []);

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function setServiceManager(\Interop\Container\ContainerInterface $sm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServiceManager', [$sm]);

        return parent::setServiceManager($sm);
    }

    /**
     * {@inheritDoc}
     */
    public function getServiceManager()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServiceManager', []);

        return parent::getServiceManager();
    }

}
